--1. Basic inner join
SELECT * 
FROM VENDORS JOIN INVOICES
    ON VENDORS.VENDOR_ID = INVOICES.VENDOR_ID
ORDER BY VENDORS.VENDOR_NAME;

--2. Basic inner join with table aliases
SELECT *
FROM CUSTOMERS_OM C INNER JOIN ORDERS O
    ON C.CUSTOMER_ID = O.CUSTOMER_ID;
    
-- 3. 
SELECT C.CUSTOMER_ID, C.CUSTOMER_FIRST_NAME || ' ' || C.CUSTOMER_LAST_NAME AS CUSTOMER_NAME, O.ORDER_ID, O.ORDER_DATE
FROM CUSTOMERS_OM C INNER JOIN ORDERS O
    ON C.CUSTOMER_ID = O.CUSTOMER_ID;


-- 4.  inner join of more than 2 tables
select c.customer_id, o.order_id, o.order_date, od.item_id, od.order_qty
from customers_om c inner join orders o on c.customer_id = o.customer_id 
                    inner join order_details od on o.order_id = od.order_id;
       
 
-- 5.  
SELECT V.VENDOR_ID, V.VENDOR_NAME, I.INVOICE_ID
FROM VENDORS V LEFT OUTER JOIN INVOICES I
        ON V.VENDOR_ID = I.VENDOR_ID
ORDER BY VENDOR_ID;



-- 6. 
SELECT E.EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PROJECT_NUMBER
FROM EMPLOYEES E FULL OUTER JOIN PROJECTS P
    ON E.EMPLOYEE_ID = P.EMPLOYEE_ID;
    
-- 6.1 
SELECT E.EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PROJECT_NUMBER
FROM EMPLOYEES E LEFT JOIN PROJECTS P
    ON E.EMPLOYEE_ID = P.EMPLOYEE_ID;

-- 6.1.1
SELECT E.EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PROJECT_NUMBER
FROM EMPLOYEES E LEFT JOIN PROJECTS P
    ON E.EMPLOYEE_ID = P.EMPLOYEE_ID
WHERE P.PROJECT_NUMBER is null;
    
-- 6.2 
SELECT E.EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PROJECT_NUMBER
FROM EMPLOYEES E RIGHT JOIN PROJECTS P
    ON E.EMPLOYEE_ID = P.EMPLOYEE_ID;
    
-- 6.2.1
SELECT E.EMPLOYEE_ID, FIRST_NAME, LAST_NAME, PROJECT_NUMBER
FROM EMPLOYEES E RIGHT JOIN PROJECTS P
    ON E.EMPLOYEE_ID = P.EMPLOYEE_ID
WHERE E.EMPLOYEE_ID is null;




-- 7.  
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE 
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('CA', 'AZ');

-- 7.1.  
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'WEST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('CA', 'AZ');

-- 7.2.  
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'WEST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('CA', 'AZ')
    UNION
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'EAST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('DC', 'MD', 'NC','NY','NJ');

-- 7.3.  
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'WEST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('CA', 'AZ')
UNION
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'EAST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('DC', 'MD', 'NC','NY','NJ')
UNION 
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'MIDWEST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('IA', 'OH', 'WI');

-- 7.4.  
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'WEST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('CA', 'AZ')
    UNION
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'EAST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('DC', 'MD', 'NC','NY','NJ')
    UNION 
SELECT CUSTOMER_ID, CUSTOMER_CITY, CUSTOMER_STATE, 'MIDWEST' AS REGION
FROM CUSTOMERS_OM
WHERE CUSTOMER_STATE IN ('IA', 'OH', 'WI')
ORDER BY 4 ASC;


-- 8.  
SELECT DISTINCT VENDOR_ID
FROM VENDORS;

-- 9.  
SELECT DISTINCT VENDOR_ID
FROM INVOICES;

-- 10.  
SELECT DISTINCT VENDOR_ID
FROM VENDORS
    MINUS
SELECT DISTINCT VENDOR_ID
FROM INVOICES;

-- 11.  
SELECT DISTINCT VENDOR_ID
FROM VENDORS
    INTERSECT
SELECT DISTINCT VENDOR_ID
FROM INVOICES;


----------------------Still want more practice?-------------------------
-- 12.  inner join of 2 tables
SELECT VENDORS.VENDOR_NAME, INVOICES.INVOICE_ID, INVOICES.INVOICE_DATE, IL.INVOICE_SEQUENCE, il.line_item_amt
FROM VENDORS INNER JOIN INVOICES ON VENDORS.VENDOR_ID = INVOICES.VENDOR_ID 
             INNER JOIN INVOICE_LINE_ITEMS IL ON INVOICES.INVOICE_ID = il.invoice_id
ORDER BY VENDORS.VENDOR_NAME;




-- 13. Is there any overlap between employees and customers
SELECT C.CUSTOMER_ID, E.EMPLOYEE_ID, E.LAST_NAME
FROM CUSTOMERS_EX C JOIN EMPLOYEES E
    ON (C.CUSTOMER_LAST_NAME = E.LAST_NAME)
AND (C.CUSTOMER_FIRST_NAME = E.FIRST_NAME);

-- 14. another option using UNION
SELECT CUSTOMER_FIRST_NAME, CUSTOMER_LAST_NAME
FROM CUSTOMERS_EX
    INTERSECT
SELECT FIRST_NAME, LAST_NAME
FROM EMPLOYEES;
    
    

-- 15. Using the UNION operator more
select vendor_name, 'No phone' as phone
from vendors
where vendor_phone is null
    union
select vendor_name, vendor_phone 
from vendors
where vendor_phone is not null;


-- 16. Join more than one table to find info on vendors and invoices
SELECT v. vendor_name, v. vendor_address1, v.vendor_city, v.vendor_state, i.invoice_id, i.terms_id, t.terms_description, t.terms_due_days
FROM vendors v JOIN invoices i ON v.vendor_id = i.vendor_id
    INNER JOIN terms t ON i.terms_id = t.terms_id;


    